FROM       ubuntu:20.04
#MAINTAINER sbh

ARG DEBCONF_NONINTERACTIVE_SEEN=true DEBIAN_FRONTEND=noninteractive

ENV LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 LANGUAGE=en_US.UTF-8 \
    TZ=Asia/Shanghai TailscaleVersion=1.34.2 \
    TAILSCALE_KEY=${TAILSCALE_KEY}  TAILSCALE_HOSTNAME=${TAILSCALE_HOSTNAME} \
    GOST_VER=2.11.1 GOST_METHOD=chacha20 GOST_PASSWORD=ss123456 GOST_PORT=8081 \
    CODE_SERVER_VER=4.91.1

RUN apt-get update && \
apt-get install -y openssh-server vim zip unzip git inetutils-ping curl wget ncat locales nginx telnet && \
localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 && \
# echo '#clear cache' && \
apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
# enable password login
echo '#enable password login' && \
echo 'root:rootPwGo!' |chpasswd && \
sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config && \
echo "PermitRootLogin yes" >> /etc/ssh/sshd_config && \
echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config && \
mkdir /root/.ssh && \
echo '#remove nginx default server conf' && \
sed -i 's%include /etc/nginx/sites-enabled/%#include /etc/nginx/sites-enabled/%g' /etc/nginx/nginx.conf

RUN useradd --uid 10014 -m appuser  && echo "appuser:appuser" | /usr/sbin/chpasswd  && adduser appuser sudo

#install tailscale
RUN curl -sL https://pkgs.tailscale.com/stable/tailscale_${TailscaleVersion:-1.34.2}_amd64.tgz | tar --no-same-owner -zx && \
mv tailscale_${TailscaleVersion:-1.34.2}_amd64 tailscale && chown -R appuser:appuser tailscale && \
#install gost proxy
curl -sL https://github.com/xiaokaixuan/gost-heroku/releases/download/v${GOST_VER}/gost_${GOST_VER}_linux_amd64.tar.gz | tar --no-same-owner -zx && \
    mv gost_${GOST_VER}_linux_amd64 gost && chmod a+x gost/gost && chown -R appuser:appuser gost
#install code-server
# curl -fOL https://github.com/coder/code-server/releases/download/v${CODE_SERVER_VER}/code-server-${CODE_SERVER_VER}-linux-amd64.tar.gz && \
# tar --no-same-owner -xzvf code-server-${CODE_SERVER_VER}-linux-amd64.tar.gz && \
# mv code-server-${CODE_SERVER_VER}-linux-amd64 code-server-linux-amd64 && \
# rm code-server-${CODE_SERVER_VER}-linux-amd64.tar.gz

RUN curl -fOL https://github.com/cloudflare/cloudflared/releases/download/2024.8.2/cloudflared-fips-linux-amd64 && chown appuser:appuser cloudflared-fips-linux-amd64 && chmod +x cloudflared-fips-linux-amd64

#container start script
RUN echo "#!/bin/bash"> /start.sh && \
echo '\
if [ -f $HOME/.bashrc ]; then \n\
  PS1=1 && source $HOME/.bashrc \n\
fi \n\
if [ $ROOT_PASSWORD ]; then \n\
    echo root:${ROOT_PASSWORD:-rootPwGo} | chpasswd \n\
fi \n\
sed -i "/#myAuthSetting-1/d" /etc/nginx/nginx.conf \n\
if [ $nginxHttpAuthUser ]; then \n\
    echo -n ${nginxHttpAuthUser:-user}: > /etc/nginx/.htpasswd \n\
    openssl passwd -apr1 ${nginxHttpAuthPassword:-none} >> /etc/nginx/.htpasswd \n\
    echo "#enable nginx http auth" \n\
    sed -i "/include \\/etc\\/nginx\\/conf.d/i\\#insertAuthInfoHere" /etc/nginx/nginx.conf \n\
    sed -i "s@#insertAuthInfoHere@auth_basic \\"Restricted\\"; #myAuthSetting-1\\nauth_basic_user_file /etc/nginx/.htpasswd; #myAuthSetting-1@g" /etc/nginx/nginx.conf \n\
fi \n\
nginx \n\
if [ $TAILSCALE_ENABLE ]; then \n\
    bash /tailscale/start.sh & \n\
fi \n\
 \n\
if [ $GOST_ENABLE ]; then \n\
    nohup /gost/gost -L=ss+mws://$GOST_METHOD:$GOST_PASSWORD@:$GOST_PORT & > /tmp/nohup_gost.out \n\
fi \n\
if [ $tunelAuthkey ]; then \n\
    /cloudflared-fips-linux-amd64 service install $tunelAuthkey \n\
fi \n\
 \n\
if [ -d code-server-linux-amd64 ]; then \n\
  cd code-server-linux-amd64 \n\
  mkdir -p /mydata/userdata/vsc_user_data \n\
  if [ $VSC_ENABLE ]; then \n\
    export PASSWORD=${VSC_PASSWORD:-vscpw} && nohup ./bin/code-server --config vsc_config.yaml --bind-addr 0.0.0.0:8443 --auth password --user-data-dir /mydata/userdata/vsc_user_data > nohup_code-server.out & echo 2>&1& echo $! > code-server.pid \n\
  fi \n\
fi \n\
if [ -f /mydata/start_ext.sh ]; then bash /mydata/start_ext.sh ; fi \n\
 \n\
mkdir -p /var/run/sshd \n\
if [ $SSHD_ENABLE ]; then \n\
/usr/sbin/sshd -D \n\
else \n\
tail -f /dev/null \n\
fi \n\
echo "end" \n\
'>> /start.sh && chmod +x /start.sh && \
#tailscale start script
echo '\
curDir=$(dirname $(readlink -f "$0")) \n\
cd $curDir \n\
dataPath=$curPath \n\
if [ -d /mydata ]; then \n\
    dataPath=/mydata/pf/tailscale \n\
fi \n\
mkdir -p $dataPath/tmp \n\
if [ $TAILSCALE_KEY ]; then \n\
    SET_TAILSCALE_KEY="--auth-key=${TAILSCALE_KEY}" \n\
fi \n\
if [ $TAILSCALE_HOSTNAME ]; then \n\
    SET_TAILSCALE_HOSTNAME="--hostname=${TAILSCALE_HOSTNAME}" \n\
fi \n\
nohup $curDir/tailscaled --tun=userspace-networking --socks5-server=localhost:1055 --state=/tmp/tailscaled.state --socket=/tmp/tailscaled.sock --port 41641 > /tmp/nohup_tailscaled.out 2>&1& echo $! > ${dataPath}/tailscaled.pid  \n\
nohup $curDir/tailscale --socket=/tmp/tailscaled.sock up ${SET_TAILSCALE_KEY} ${SET_TAILSCALE_HOSTNAME}  > /tmp/nohup_tailscale_up.out & \n\
echo "tailscale!" \n\
' > tailscale/start.sh && chmod +x tailscale/start.sh && \
#nginx http server config
echo '\
map $http_upgrade $connection_upgrade { \n\
    default upgrade; \n\
    "" close; \n\
} \n\
 \n\
server { \n\
    listen       80; \n\
    listen  [::]:80; \n\
    server_name  localhost; \n\
    location / { \n\
        root   /usr/share/nginx/html; \n\
        index  index.html index.htm; \n\
    } \n\
\n\
    location /gost/ { \n\
        proxy_pass http://127.0.0.1:8081/; \n\
        proxy_set_header Host $host; \n\
        proxy_http_version 1.1; \n\
        proxy_set_header Upgrade $http_upgrade; \n\
        proxy_set_header Connection "upgrade"; \n\
    } \n\
 \n\
    location /vsc/ { \n\
        proxy_pass http://127.0.0.1:8443/; \n\
        proxy_set_header Host $host; \n\
        proxy_http_version 1.1; \n\
        proxy_set_header Upgrade $http_upgrade; \n\
        proxy_set_header Connection "upgrade"; \n\
    } \n\
 \n\
    location ~* ^/vnc/(.*) { \n\
        resolver 127.0.0.11 valid=30s ipv6=off; \n\
        set $target "novnc-p:6080"; \n\
        proxy_pass http://$target/$1$is_args$args; \n\
        # add_header Cache-Control no-store; \n\
        proxy_set_header Host $host; \n\
        proxy_http_version 1.1; \n\
        proxy_set_header Upgrade $http_upgrade; \n\
        proxy_set_header Connection "upgrade"; \n\
        proxy_set_header X-Real-IP $remote_addr; \n\
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \n\
    } \n\
} \n\
'> /etc/nginx/conf.d/default.conf

# Use the above created unprivileged user
USER 10014

EXPOSE 80

ENTRYPOINT [ "/start.sh" ]